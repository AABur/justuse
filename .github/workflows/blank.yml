name: Unit Tests

on:
  fork:
  pull_request:
    types: [opened, edited, closed]
  push:
  release:
    types: [published, created, edited, released]

jobs:
  test-ubuntu:
    runs-on: ubuntu-latest
    steps:
      - name: Ubuntu - Check out source
        uses: actions/checkout@v2
      - name: Ubuntu - Run Unit Tests with Coverage
        run: |
          export FTP_USER="${{ secrets.FTP_USER }}"
          export FTP_PASS="${{ secrets.FTP_PASS }}"
          [ -e tests/coverage.sh ] && bash ./tests/coverage.sh
          [ -e tests/coverage.sh ] || {
            python3 -m pip install anyio mmh3 mypy packaging pip pytest pytest-env pytest-cov requests types-toml
            python3 -m pytest
          }
      - name: Genetate coverage badge
        uses: tj-actions/coverage-badge-py@v1.6
        with:
          token: ${{ secrets.PAT_TOKEN }}
          github-token: ${{ secrets.PAT_TOKEN }}
          repository: amogorkon/justuse
          authentication: bearer ${{ secrets.PAT_TOKEN }}
      - name: Upload coverage badge
        run: |
          export GITHUB_TOKEN="${{ secrets.PAT_TOKEN }}"
          export GITHUB_PAT_TOKEN="${{ secrets.PAT_TOKEN }}"
          export FTP_USER="${{ secrets.FTP_USER }}"
          export FTP_PASS="${{ secrets.FTP_PASS }}"
          bash tests/coverage.sh upload || true

  test-windows:
    runs-on: windows-latest

    steps:
      - name: Run a multi-line script
        uses: actions/checkout@v2
      - run: |
          echo "Setting TLS security properties ..."
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
          echo "Downloading recent Python 3 ..."
          Invoke-WebRequest -Uri "https://www.python.org/ftp/python/3.9.0/python-3.9.0.exe" -OutFile "c:/temp/python-3.9.0.exe"
          echo "Installing Python 3 ..."
          & "c:/temp/python-3.9.0.exe" /quiet InstallAllUsers=0 PrependPath=1 Include_test=0
          echo "Waiting for setup to complete ..."
          $env:PATH = "$env:LOCALAPPDATA\Programs\Python\Python39-32;$env:LOCALAPPDATA\Programs\Python\Python39-32\lib;$env:PATH"
          env
          while (!(Test-Path "$env:LOCALAPPDATA/Programs/Python/Python39-32/python.exe")) {
            Write-Host "Waiting for installation"
            [System.Threading.Thread]::Sleep(1000)
          }
          $pyver = ""
          while (!($pyver.Contains(" 3.9"))) {
            $pyver = $(
              & "$env:LOCALAPPDATA/Programs/Python/Python39-32/python.exe" -m pip --version || & { $global:LASTEXITCODE = 0; }
            ) -join "`n"
          }
          echo "Windows-Tests: Preloading package dependencies ..."
          & "$env:LOCALAPPDATA/Programs/Python/Python39-32/python.exe" -m pip install anyio mmh3 mypy packaging pip pytest pytest-env pytest-cov requests types-toml types-requests furl yarl
          echo "Windows-Tests: Running tests ..."
          $env:DEBUG = 1
          $env:ERRORS = 1
          & "$env:LOCALAPPDATA/Programs/Python/Python39-32/python.exe" -m pytest

  test-macos:
    runs-on: macos-latest

    steps:
      - name: Run a multi-line script
        uses: actions/checkout@v2
      - run: |
          echo "MacOS-Tests: Preloading package dependencies ..."
          python3 -m pip install anyio mmh3 mypy packaging pip pytest pytest-env pytest-cov requests types-toml types-requests furl yarl
          echo "MacOS-Tests: Running tests ..."
          mkdir -p ~/.justuse-python/
          echo "debug = true" > ~/.justuse-python/config.toml
          env DEBUG=1 ERRORS=1 python3 -m pytest
